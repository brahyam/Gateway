package com.aallam.openai.api.image

import kotlinx.serialization.SerialName
import kotlinx.serialization.Serializable
import kotlinx.serialization.json.jsonObject
import kotlinx.serialization.json.jsonPrimitive

/**
 * Response from Gemini image generation API.
 */
@Serializable
public data class GeminiImageResponse(
    /**
     * The candidates generated by the model.
     */
    @SerialName("candidates") public val candidates: List<GeminiCandidate>,
)

/**
 * Represents a candidate response from Gemini.
 */
@Serializable
public data class GeminiCandidate(
    /**
     * The content of this candidate.
     */
    @SerialName("content") public val content: GeminiResponseContent,
)

/**
 * Represents response content from Gemini.
 */
@Serializable
public data class GeminiResponseContent(
    /**
     * The parts that make up this response content.
     * Using JsonElement to avoid sealed class serialization issues.
     */
    @SerialName("parts") public val parts: List<kotlinx.serialization.json.JsonElement>,
)

/**
 * Represents inline data in a response with MIME type and base64 content.
 */
@Serializable
public data class GeminiResponseInlineData(
    /**
     * The MIME type of the data (e.g., "image/png").
     */
    @SerialName("mimeType") public val mimeType: String,

    /**
     * The base64-encoded data.
     */
    @SerialName("data") public val data: String,
)

/**
 * Extension functions for easier access to response data.
 */

/**
 * Get all text parts from the response.
 */
public fun GeminiImageResponse.getTextParts(): List<String> {
    return candidates.flatMap { candidate ->
        candidate.content.parts.mapNotNull { part ->
            try {
                val partObj = part.jsonObject
                partObj["text"]?.jsonPrimitive?.content
            } catch (e: Exception) {
                null
            }
        }
    }
}

/**
 * Get all image parts from the response.
 */
public fun GeminiImageResponse.getImageParts(): List<GeminiResponseInlineData> {
    return candidates.flatMap { candidate ->
        candidate.content.parts.mapNotNull { part ->
            try {
                val partObj = part.jsonObject
                val inlineData = partObj["inlineData"]?.jsonObject
                if (inlineData != null) {
                    val mimeType = inlineData["mimeType"]?.jsonPrimitive?.content ?: ""
                    val data = inlineData["data"]?.jsonPrimitive?.content ?: ""
                    GeminiResponseInlineData(mimeType, data)
                } else null
            } catch (e: Exception) {
                null
            }
        }
    }
}

/**
 * Get the first text part from the response, if available.
 */
public fun GeminiImageResponse.getFirstText(): String? {
    return getTextParts().firstOrNull()
}

/**
 * Get the first image part from the response, if available.
 */
public fun GeminiImageResponse.getFirstImage(): GeminiResponseInlineData? {
    return getImageParts().firstOrNull()
}